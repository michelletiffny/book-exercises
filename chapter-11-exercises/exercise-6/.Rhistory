demo()
Japanese
graphics
2+1
fsfhdj
clear
clc
close
#My first program using RStudio in R
print("Hello World")
print "Hello World"
#My first program using RStudio in R
print("Hello Wold")
#assigning to a variable
mynum <- 201
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 2
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Jakarta"
# Assign your name to the variable `my_name`
my_name <- "Michelle"
# Assign your height (in inches) to a variable `my_height`
my_height <- 65
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 500
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 500
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
total_cost
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/total_cost
max_puppies
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
name_length
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name)+"is programming"
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name "is programming")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
now_doing
# Make the `now_doing` variable upper case
toupper(now_doing)
fav_2 <- fav_2 / sqrt(201)
fav_2 <- 5
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 12
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_1
fav_2 <- fav_2 / sqrt(201)
fav_2
raw_sum
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
raw_sum
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
round_sum
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
round_sum
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
sum_round
round_sum
return(add_three + 3)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- 5
return(add_three + 3)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(input) {
add <- input+3
print(add)
}
add_three(5)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
in_meter <- feet/3.28 + inches/0.0254
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_meter <- feet/3.28 + inches/0.0254
print(in_meter)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(6,5)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,5)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_meter <- (feet/3.28) + (inches/0.0254)
print(in_meter)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,5)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_meter <- (feet*3.28) + (inches*0.0254)
print(in_meter)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,5)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_meter <- (feet/3.28) + (inches/0.0254)
print(in_meter)
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_meter <- (feet+inches/3.28)
print(in_meter)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,5)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_meter <- (feet/3.28)+(inches/0.0254)
print(in_meter)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,5)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
in_to_ft <- (inches/12)
in_meter <- (feet + in_to_ft) /3.28
print(in_meter)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,5)
View(flights)
setwd("~/University of Washington/Winter 2020/INFO 201/Exercises/book-exercises/chapter-11-exercises/exercise-5")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep,delay, na.rm = TRUE))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa = arr_delay_by_month$dest[1])
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
# Which city was flown to with the highest average speed?
city_fastest_speed <- flights %>%
mutate(speed = distance/air_time*60) %>%
group_by(dest) %>%
summarize(
avg_speed = mean(speed, na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed, na.rm =TRUE))
city_fastest_speed
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_airline_delay
View(airlines)
View(airports)
setwd("~/University of Washington/Winter 2020/INFO 201/Exercises/book-exercises/chapter-11-exercises/exercise-6")
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
# Create a dataframe of the average arrival delay for each _airline_, then use
# `left_join()` to join on the "airlines" dataframe
# Which airline had the smallest average arrival delay?
smallest_airline_delay <- flights %>%
group_by(carrier) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE)
) %>%
left_join(airlines, by = "carrier") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
smallest_airline_delay
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
library("httr")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
response <- GET(base_uri)
response
base_uri
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
endpoint <- "/search/repositories"
endpoint
org_resource <- paste0(base_uri, endpoint)
org_resource
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
endpoint <- "/users/programming-for-data-science/repos"
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response <- GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
resource_uri <- paste0(base_uri, org_resource)
response <- GET(resource_uri)
resource_uri
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/users/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
resource_uri <- paste0(base_uri, org_resource)
resource_uri
response <- GET(resource_uri)
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, type = "text")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_text <- content(response, type = "text")
response_text
install.packages("jsonlite")
library("jsonlite")
# Convert the content variable from a JSON string into a data frame.
response_data <- fromJSON(response_text)
response_data
View(response_data)
colnames(response_data)
# How many (public) repositories does the organization have?
nrow(org_repos)
# How many (public) repositories does the organization have?
nrow(org_repos)
# How many (public) repositories does the organization have?
nrow(response_data)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "dplyr")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response2 <- GET(resource_uri, query = query_params)
print(response2)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text2 <- content(reponse2, type = "text")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response2 <- GET(resource_uri, query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text2 <- content(reponse2, type = "text")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(resource_uri, query = query_params)
print(response)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text2 <- content(reponse2, type = "text")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text2 <- content(reponse, type = "text")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(paste0(base_uri, search_endpoint) query = query_params)
print(response)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(paste0(base_uri, search_endpoint) query = query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "dplyr")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(paste0(base_uri, search_endpoint) query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(paste0(base_uri, search_endpoint) query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response <- GET(paste0(base_uri, search_endpoint), query = query_params)
print(response)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text <- content(reponse, type = "text")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text <- content(response, type = "text")
response_text
graphic_repos <- fromJSON(response_text)
View(graphic_repos)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(graphic_repos$total_count)
# What are the full names of the top 5 repos in the search results?
top5_names <- graphic_repos$items$full_name[1:5]
print(top5_names)
graphic_repos
View(graphic_repos)
graphic_repos[["incomplete_results"]]
colnames(graphic_repos)
