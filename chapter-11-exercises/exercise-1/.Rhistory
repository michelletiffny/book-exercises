install.packages(c("devtools", "fueleconomy"))
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("fueleconomy")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[,vehicles$make]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[,"vehicles$make"]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[,"make"]
manufacturers
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Filter the data set for vehicles manufactured in 1997
made_in_1997 <- vehicles[vehicles$year == "1997",]
made_in_1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(made_in_1997, hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(made_in_1997, vehicles$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$hwy, made_in_1997)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(manufacturers))
vehicle$make
vehicles$make
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_in_1997[order(hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_in_1997[order(vehicles$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_in_1997[order(vehicles$hwy),]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_in_1997[,order(vehicles$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_in_1997[order(vehicles$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
made_in_1997$average <- (made_in_1997$hwy + made_in_1997$cty)/2
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
made_in_1997[order(vehicles$hwy), c(1,2)]
View(made_in_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[vehicles$drive == "2-Wheel Drive",]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wd <- vehicles[vehicles$drive == "2-Wheel Drive",]
efficient_two_wd <- two_wd[two_wd$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- efficient_two_wd[min(efficient_two_wd$cty),]
id_worst_mpg <- efficient_two_wd[efficient_two_wd$cty == worst_mpg, "id"]
id_worst_mpg
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- efficient_two_wd[min(efficient_two_wd$hwy),]
id_worst_mpg <- efficient_two_wd[efficient_two_wd$hwy == worst_mpg, "id"]
id_worst_mpg
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_mpg <- two_wd[min(two_wd$hwy),]
id_worst_mpg <- two_wd[two_wd$hwy == worst_mpg, "id"]
id_worst_mpg
two_wd[two_wd$hwy == min(two_wd$hwy),"id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wd[two_wd$hwy == min(two_wd$hwy),"id"]
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
makes
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
madein1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange1997 <- arrange(madein1997, hwy)
made_in_1997
arrange1997
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(arrange1997, average = (hwy + cty)/2)
# Arrange the 1997 cars by highway (`hwy`) gas milage
madein1997 <- arrange(madein1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(madin1997, average = (hwy + cty)/2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(madein1997, average = (hwy + cty)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_2wd <- filter(vehicles, drive == 2-Wheel Drive)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_2wd <- filter(vehicles, drive == "2-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_2wd <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
efficient_2wd
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- filter(efficient_2wd, min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- filter(efficient_2wd, hwy == min(hwy))
worst_hwy_id <- select(worst_hwy, id)
worst_hwy
worst_hwy_id
choice <- filter(vehicles, year == 2015, make == "Honda")
choice
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_mpg <- function(year_choice, make_choice) {
choice <- filter(vehicles, year == year_choice, make == make_choice)
most_hwy <- select(choice, hwy == max(hwy))
return(most_hwy)
}
most_hwy_mpg(2015, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_mpg <- function(year_choice, make_choice) {
choice <- filter(vehicles, year == year_choice, make == make_choice)
most_hwy <- filter(choice, hwy == max(hwy))
most_hwy_model <- select(most_hwy, model)
return(most_hwy)
}
most_hwy_mpg(2015, "Honda")
return(most_hwy_model)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_hwy_mpg <- function(year_choice, make_choice) {
choice <- filter(vehicles, year == year_choice, make == make_choice)
most_hwy <- filter(choice, hwy == max(hwy))
most_hwy_model <- select(most_hwy, model)
return(most_hwy_model)
}
most_hwy_mpg(2015, "Honda")
# What was the most efficient Honda model of 1995?
most_hwy_mpg(1995, "Honda")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
library("dplyr")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = (arr_delay - dep_delay))
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = (arr_delay - dep_delay))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <_ mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sort_descending <- arrange(flights, -time_gained_or_lost)
sort_descending
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_gained_or_lost)
View(flights)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(time_gained_or_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
to_sea
to_sea <- select(to_sea, origin, dest, time_gained_or_lost)
to_sea
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg = mean(time_gained_or_lost, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- to_sea %>%
mean(time_gained_or_lost, na.rm = TRUE) %>%
max(time_gained_or_lost, na.rm = TRUE) %>%
min(time_gained_or_lost, na.rm = TRUE)
jfk_to_sea <- to_sea %>%
mean(time_gained_or_lost, na.rm = TRUE) %>%
max(time_gained_or_lost, na.rm = TRUE) %>%
min(time_gained_or_lost, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- to_sea %>%
mean(time_gained_or_lost, na.rm = TRUE) %>%
max(time_gained_or_lost, na.rm = TRUE) %>%
min(time_gained_or_lost, na.rm = TRUE)
time_gained_or_lost
to_sea
time_gained_or_lost
to_sea$time_gained_or_lost
jfk_to_sea <- to_sea %>%
mean(to_sea$time_gained_or_lost, na.rm = TRUE) %>%
max(to_sea$time_gained_or_lost, na.rm = TRUE) %>%
min(to_sea$time_gained_or_lost, na.rm = TRUE)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
jfk_to_sea <- to_sea %>%
mean(to_sea$time_gained_or_lost) %>%
max(to_sea$time_gained_or_lost, na.rm = TRUE) %>%
min(to_sea$time_gained_or_lost, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained_or_lost) %>%
summarize(avg_delayed = mean(time_gained_or_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, time_gained_or_lost) %>%
summarize(avg_delayed = mean(time_gained_or_lost, na.rm = TRUE)) %>%
pull(avg_delayed)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(
avg_air_time = mean(time_gained_or_lost, na.rm = TRUE),
max_air_time = max(time_gained_or_lost, na.rm = TRUE),
min_air_tie = min(time_gained_or_lost, na.rm = TRUE)
)
