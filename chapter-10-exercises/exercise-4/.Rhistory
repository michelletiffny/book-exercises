#   The function will return the date of their next birthdays the next year
# Test the function and put the values of the accessed list to each variable
get_next_birthday <- function(birthdate) {
the_next_bday <- change_year(birthdate, 2020)
pass <- date_has_passed(the_next_bday)
if(pass == TRUE) {
the_next_bday <- change_year(birthdate, 2021)
}
return(the_next_bday)
}
my_next_bday <- get_next_birthday(birthdays$my_bday)
papa_next_bday <- get_next_birthday(birthdays$papa_bday)
mama_next_bday <- get_next_birthday(birthdays$mama_bday)
koko_next_bday <- get_next_birthday(birthdays$koko_bday)
# Create a variable
#   next_birthdays that contains the list of my family's next birthdays
next_birthdays <- lapply(birthdays, get_next_birthday)
lintr::lint("assignment.R")
#   my_age that contains my age
#   my_name that contains my name
my_age <- 19
my_name <- "Michelle"
# Create a function:
#   make_introduction that passes two variables
#   and put the values of the variables into one
#   sentence that make an intro sentence
#   "Hello, my name is Michelle and I'm 19 years old"
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is", name, "and I'm", age, "years old")
return(intro)
}
# Create variable and print it
# my_intro that has the returned value of
# make_introduction() function
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create variable and print it
# casual_intro that substitutes the word
# "Hello, my name is" to "Hey, I'm"
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Create the variable and print it
#   capital_intro that capitalized the first letter
#   in each word of my_intro
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Create the variable and print it
#   intro_e_count that counts the letter small "e"
#   in the sentece my_intro
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Create a variable and print it
#   books that contains 6 of my favorite books
books <- c("To All The Boys I've Loved Before",
"Becoming", "Woke Gaming", "How To Win Friends and Influence People",
"Looking for Alaska", "Technofeminism")
print(books)
# Create a variable and print it
#   top_three_books that contains only the first
#   three books in the vector books
top_three_books <- books[1:3]
print(top_three_books)
# Create a variable and print it
#   book_reviews that adds the phrase "is a great read!"
#   to each of the book titles
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Create a function
#   remove_book that removes the specified index book title
remove_book <- function(titles, index) {
remove <- titles[-c(index)]
return(remove)
}
#Create a variable and print it
#   books_without_five that has the value of all books
#   except without the fifth book removed by the
#   remove_book() function
books_without_five <- remove_book(books, 5)
print(books_without_five)
# Create a variable and print it
# long_titles that contains book titles with more
# than 15 characters
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# Create variables
#   numbers that contains the numbers 1 to 201
#   squared_numbers that contains the values of numbers squared
#   squared_mean that contains the average of squared_numbers
#   squared_median that contains the middle value of the squared_numbers
#   perfect_squares that contains the numbers that can be square-rooted
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
# Create a variable
#   spring_break that contains the first day of
#   spring break 2020
dates <- "03/21/2020"
spring_break <- as.Date(dates, "%m/%d/%Y")
class(spring_break)
# Create a variable
#   today that contains today's date
today <- Sys.Date()
# Create a variable and print it
#   days_to_break that contains the remaining days
#   from today until the first day of spring break
days_to_break <- as.Date(spring_break) - as.Date(today)
print(days_to_break)
# Create a function
#   change_year that takes in two inputs:
#     date_to_change and year
#   the function will change the year of the date inputted
#   to the specified new year
# Test the change_year() function by calling the function
# with spring_break as the date_to_change input and 2025 as inputted year
# Assign the result to a variable called spring_break_2025
change_year <- function(date_to_change, year) {
date_as_string <- as.character(date_to_change)
month_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_day)
the_new_date <- as.Date(new_date, "%Y -%m-%d")
return(the_new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# Create a function
#   date_has_passed that takes in one input variable and
#   returns a boolean value that determines whether the
#   specified date has passed or not
date_has_passed <- function(date, ignore_year = FALSE) {
today <- Sys.Date()
pass <- as.Date(date) - as.Date(today)
return( pass < 0 )
if(ignore_year == TRUE) {
date2 <- format(date, format = "%m-%d")
today2 <- format(today, format = "%m-%d")
pass2 <- as.Date(date2) - as.Date(today2)
return(pass2 < 0)
}
}
print(date_has_passed(as.Date("2020-01-23", "%Y-%m-%d")))
# Create a variable
#   birthdays that contains a list of me and my family's birthdays
birthdays <- list(my_bday = as.Date("05-12-2000", "%m-%d-%Y"),
papa_bday = as.Date("04-09-1971", "%m-%d-%Y"),
mama_bday = as.Date("07-01-1971", "%m-%d-%Y"),
koko_bday = as.Date("09-11-1998", "%m-%d-%Y"))
print(birthdays)
# Create a function
#   get_next_birthday that takes in one list of birthday dates
#   The function will return the date of their next birthdays the next year
# Test the function and put the values of the accessed list to each variable
get_next_birthday <- function(birthdate) {
the_next_bday <- change_year(birthdate, 2020)
pass <- date_has_passed(the_next_bday)
if(pass == TRUE) {
the_next_bday <- change_year(birthdate, 2021)
}
return(the_next_bday)
}
my_next_bday <- get_next_birthday(birthdays$my_bday)
papa_next_bday <- get_next_birthday(birthdays$papa_bday)
mama_next_bday <- get_next_birthday(birthdays$mama_bday)
koko_next_bday <- get_next_birthday(birthdays$koko_bday)
# Create a variable
#   next_birthdays that contains the list of my family's next birthdays
next_birthdays <- lapply(birthdays, get_next_birthday)
lintr::lint("assignment.R")
library("stringr")
# Assignment 2 INFO 201
# Michelle Tiffany Tan
# January 17, 2020
#################
#### PART 1 #####
#################
# Create variables:
#   my_age that contains my age
#   my_name that contains my name
my_age <- 19
my_name <- "Michelle"
# Create a function:
#   make_introduction that passes two variables
#   and put the values of the variables into one
#   sentence that make an intro sentence
#   "Hello, my name is Michelle and I'm 19 years old"
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is", name, "and I'm", age, "years old")
return(intro)
}
# Create variable and print it
#   my_intro that has the returned value of
#   make_introduction() function
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create variable and print it
# casual_intro that substitutes the word
# "Hello, my name is" to "Hey, I'm"
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Create the variable and print it
#   capital_intro that capitalized the first letter
#   in each word of my_intro
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Create the variable and print it
#   intro_e_count that counts the letter small "e"
#   in the sentece my_intro
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Create a variable and print it
#   books that contains 6 of my favorite books
books <- c("To All The Boys I've Loved Before",
"Becoming", "Woke Gaming",
"How To Win Friends and Influence People",
"Looking for Alaska", "Technofeminism")
print(books)
# Create a variable and print it
#   top_three_books that contains only the first
#   three books in the vector books
top_three_books <- books[1:3]
print(top_three_books)
# Create a variable and print it
#   book_reviews that adds the phrase "is a great read!"
#   to each of the book titles
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Create a function
#   remove_book that removes the specified index book title
remove_book <- function(titles, index) {
remove <- titles[-c(index)]
return(remove)
}
#Create a variable and print it
#   books_without_five that has the value of all books
#   except without the fifth book removed by the
#   remove_book() function
books_without_five <- remove_book(books, 5)
print(books_without_five)
# Create a variable and print it
# long_titles that contains book titles with more
# than 15 characters
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# Create variables
#   numbers that contains the numbers 1 to 201
#   squared_numbers that contains the values of numbers squared
#   squared_mean that contains the average of squared_numbers
#   squared_median that contains the middle value of the squared_numbers
#   perfect_squares that contains the numbers that can be square-rooted
numbers <- seq(1, 201)
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
# Create a variable
#   spring_break that contains the first day of
#   spring break 2020
dates <- "03/21/2020"
spring_break <- as.Date(dates, "%m/%d/%Y")
class(spring_break)
# Create a variable
#   today that contains today's date
today <- Sys.Date()
# Create a variable and print it
#   days_to_break that contains the remaining days
#   from today until the first day of spring break
days_to_break <- as.Date(spring_break) - as.Date(today)
print(days_to_break)
# Create a function
#   change_year that takes in two inputs:
#     date_to_change and year
#   the function will change the year of the date inputted
#   to the specified new year
# Test the change_year() function by calling the function
# with spring_break as the date_to_change input and 2025 as inputted year
# Assign the result to a variable called spring_break_2025
change_year <- function(date_to_change, year) {
date_as_string <- as.character(date_to_change)
month_day <- substr(date_as_string, 5, nchar(date_as_string))
new_date <- paste(year, month_day)
the_new_date <- as.Date(new_date, "%Y -%m-%d")
return(the_new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
# Create a function
#   date_has_passed that takes in one input variable and
#   returns a boolean value that determines whether the
#   specified date has passed or not
date_has_passed <- function(date, ignore_year = FALSE) {
today <- Sys.Date()
pass <- as.Date(date) - as.Date(today)
return(pass < 0)
if(ignore_year == TRUE) {
date2 <- format(date, format = "%m-%d")
today2 <- format(today, format = "%m-%d")
pass2 <- as.Date(date2) - as.Date(today2)
return(pass2 < 0)
}
}
print(date_has_passed(as.Date("2020-01-23", "%Y-%m-%d")))
# Create a variable
#   birthdays that contains a list of me and my family's birthdays
birthdays <- list(my_bday = as.Date("05-12-2000", "%m-%d-%Y"),
papa_bday = as.Date("04-09-1971", "%m-%d-%Y"),
mama_bday = as.Date("07-01-1971", "%m-%d-%Y"),
koko_bday = as.Date("09-11-1998", "%m-%d-%Y"))
print(birthdays)
# Create a function
#   get_next_birthday that takes in one list of birthday dates
#   The function will return the date of their next birthdays the next year
# Test the function and put the values of the accessed list to each variable
get_next_birthday <- function(birthdate) {
the_next_bday <- change_year(birthdate, 2020)
pass <- date_has_passed(the_next_bday)
if(pass == TRUE) {
the_next_bday <- change_year(birthdate, 2021)
}
return(the_next_bday)
}
my_next_bday <- get_next_birthday(birthdays$my_bday)
papa_next_bday <- get_next_birthday(birthdays$papa_bday)
mama_next_bday <- get_next_birthday(birthdays$mama_bday)
koko_next_bday <- get_next_birthday(birthdays$koko_bday)
# Create a variable
#   next_birthdays that contains the list of my family's next birthdays
next_birthdays <- lapply(birthdays, get_next_birthday)
lintr::lint("assignment.R")
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks <- c(22, 19, 23, 17)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(22, 19, 23, 17)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_allowed <- c(28, 30, 27, 26)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points, points_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$points - games$points_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Rams", "Panthers","Cardinals","49ers")
# View your data frame to see how it has changed!
View(games)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(12, 30, 13, 21)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
points_allowed <- c(28, 24, 27, 26)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points, points_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$points - games$points_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Rams", "Panthers","Cardinals","49ers")
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employees", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary2017, annual_salary, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary2018 <- salaries$salary2017 + salaries$annual_salary
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$2018 > salaries$2017
view(salaries)
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salary2018 > salaries$salary2017
View(salaries)
# What was the 2018 salary of Employee 57
emp57 <- salaries[salaries$employees == "Employee 57", "salary2018"]
emp57
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary2017, annual_salary, stringsAsFactors = FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary2017, annual_salary, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary2018 <- salaries$salary2017 + salaries$annual_salary
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salary2018 > salaries$salary2017
View(salaries)
# What was the 2018 salary of Employee 57
emp57 <- salaries[salaries$employees == "Employee 57", "salary2018"]
emp57
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$annual_salary)
highest_raise
# What was the "name" of the employee who received the highest raise?
highest_raise_emp <- salaries[salaries$annual_salary == highest_raise, "employees"]
highest_raise_emp
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$annual_salary)
largest_decrease
# What was the name of the employee who recieved largest decrease in salary?
largest_decrease_emp <- salaries[salaries$annual_salary == largest_decrease, "employees"]
largest_decrease_emp
# What was the average salary change?
average_salary <- mean(salaries$annual_salary)
average_salary
# For people who did not get a raise, how much money did they lose on average?
average_salary_decrease <- mean(salaries$annual_salary[salaries$raise == FALSE])
average_salary_decrease
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
getwd()
cd(Desktop)
setwd("C:/Users/miche/Desktop/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mgv <- mean(grant$total_amount)
# What was the mean grant value?
mgv <- mean(grants$total_amount)
mgv
# What was the dollar amount of the largest grant?
largest_grant <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants$total_amount)
# Which organization received the largest grant?
largest_grant_org <- grants[largest_grant]
# Which organization received the largest grant?
largest_grant_org <- organization[grants$total_amount == largest_grant]
# Which organization received the smallest grant?
smallest_grant_org <- organization[grants$total_amount == smallest_grant]
# How many grants were awarded in 2010?
grants2010 <- length(grants$total_amount[grants$start_year == 2010])
grants2010
